-- Extensiones necesarias para UUID
CREATE EXTENSION IF NOT EXISTS pgcrypto;

-- 1. Usuario
CREATE TABLE IF NOT EXISTS users (
    user_id        SERIAL PRIMARY KEY,
    first_name     VARCHAR(255),
    last_name      VARCHAR(255),
    email          VARCHAR(255) NOT NULL UNIQUE,
    password_hash  VARCHAR(255) NOT NULL,
    created_at     TIMESTAMPTZ NOT NULL DEFAULT now(),
    CONSTRAINT ux_users_first_name UNIQUE (first_name),
    CONSTRAINT ux_users_email UNIQUE (email)
);
CREATE INDEX IF NOT EXISTS idx_users_email ON users (email);

-- 3. Country
CREATE TABLE IF NOT EXISTS country (
  country_id  INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name        VARCHAR(100) NOT NULL UNIQUE,
  iso_code    CHAR(3)
);

-- 4. City
CREATE TABLE IF NOT EXISTS city (
  city_id     INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  country_id  INTEGER NOT NULL REFERENCES country(country_id),
  name        VARCHAR(100) NOT NULL
);
CREATE INDEX IF NOT EXISTS idx_city_name   ON city (name);
CREATE INDEX IF NOT EXISTS idx_city_country ON city (country_id);

-- 5. Role
CREATE TABLE IF NOT EXISTS role (
  role_id     INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name        VARCHAR(50) NOT NULL UNIQUE,
  description VARCHAR(255)
);

-- 6. Privilege
CREATE TABLE IF NOT EXISTS privilege (
  privilege_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name         VARCHAR(50) NOT NULL UNIQUE,
  description  VARCHAR(255)
);

-- 7. Role_Privilege (M:N)
CREATE TABLE IF NOT EXISTS role_privilege (
  role_id        INTEGER NOT NULL REFERENCES role(role_id) ON DELETE CASCADE,
  privilege_id   INTEGER NOT NULL REFERENCES privilege(privilege_id) ON DELETE CASCADE,
  assigned_at    TIMESTAMPTZ NOT NULL DEFAULT now(),
  PRIMARY KEY (role_id, privilege_id)
);

-- 8. User_Role (M:N)
CREATE TABLE IF NOT EXISTS user_role (
  user_id      UUID NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
  role_id      INTEGER NOT NULL REFERENCES role(role_id) ON DELETE CASCADE,
  assigned_at  TIMESTAMPTZ NOT NULL DEFAULT now(),
  PRIMARY KEY (user_id, role_id)
);
CREATE INDEX IF NOT EXISTS idx_user_role_u ON user_role (user_id);
CREATE INDEX IF NOT EXISTS idx_user_role_r ON user_role (role_id);

-- 9. Video_Status
CREATE TABLE IF NOT EXISTS video_status (
  status_id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name        VARCHAR(30) NOT NULL UNIQUE,
  description VARCHAR(255)
);

-- 2. Player (1:1 with User)
CREATE TABLE IF NOT EXISTS player (
  user_id       UUID PRIMARY KEY REFERENCES users(user_id) ON DELETE CASCADE,
  city_id       INTEGER NOT NULL REFERENCES city(city_id),
  registered_at TIMESTAMPTZ NOT NULL DEFAULT now()
);
CREATE INDEX IF NOT EXISTS idx_player_city ON player (city_id);

-- 10. Video
CREATE TABLE IF NOT EXISTS video (
  video_id           UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  player_id          UUID NOT NULL REFERENCES player(user_id) ON DELETE CASCADE,
  title              VARCHAR(255) NOT NULL,
  original_file      VARCHAR(255) NOT NULL,
  processed_file     VARCHAR(255),
  status_id          INTEGER NOT NULL REFERENCES video_status(status_id),
  uploaded_at        TIMESTAMPTZ NOT NULL DEFAULT now(),
  processed_at       TIMESTAMPTZ
);
CREATE INDEX IF NOT EXISTS idx_video_player ON video (player_id);
CREATE INDEX IF NOT EXISTS idx_video_status ON video (status_id);

-- 11. Vote
CREATE TABLE IF NOT EXISTS vote (
  vote_id    UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id    UUID NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
  video_id   UUID NOT NULL REFERENCES video(video_id) ON DELETE CASCADE,
  voted_at   TIMESTAMPTZ NOT NULL DEFAULT now(),
  CONSTRAINT unique_vote_user_video UNIQUE (user_id, video_id)
);
CREATE INDEX IF NOT EXISTS idx_vote_user  ON vote (user_id);
CREATE INDEX IF NOT EXISTS idx_vote_video ON vote (video_id);
