version: "3.9"

services:
  redis:
    image: redis:7-alpine
    command: ["redis-server","--appendonly","yes"]
    ports: ["6379:6379"]
    volumes: [redis-data:/data]
    restart: unless-stopped
    healthcheck:
      test: ["CMD","redis-cli","ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    ports:
      - "5672:5672"     # AMQP
      - "15672:15672"   # UI
      - "15692:15692"   # Prometheus metrics (rabbitmq_prometheus)
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
      - rabbitmq-logs:/var/log/rabbitmq
      - ./rabbitmq/enabled_plugins:/etc/rabbitmq/enabled_plugins:ro
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
      - ./rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD","rabbitmq-diagnostics","-q","ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: app_user
      POSTGRES_PASSWORD: app_password
      POSTGRES_DB: videorank
    ports: ["5432:5432"]
    volumes: [pg-data:/var/lib/postgresql/data]
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL","pg_isready -U $$POSTGRES_USER"]
      interval: 10s
      timeout: 5s
      retries: 5

  migrate:
    image: migrate/migrate:4
    container_name: app_migrate
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./migrations:/migrations:ro
    environment:
      DATABASE_URL: postgres://app_user:app_password@db:5432/videorank?sslmode=disable
    entrypoint: ["/bin/sh", "-c"]
    command:
      - |
        /usr/bin/migrate -path=/migrations -database "$$DATABASE_URL" up
    restart: "no"

  api:
    build:
      context: ./Api
    container_name: app_api
    depends_on:
      db:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    environment:
      # Ajusta estos nombres a lo que lea tu config.FromEnv()
      DATABASE_URL: postgres://app_user:app_password@db:5432/videorank?sslmode=disable
      JWT_SECRET: super_ultra_secreto_cambialo
      PORT: "8080"
      API_PORT: "8080"         # por si tu config usa API_PORT
      CORS_ORIGIN: "*"
      UPLOAD_DIR: "/uploads"
    ports: ["8080:8080"]
    volumes: [api_uploads:/uploads]


  minio:
    image: minio/minio:latest
    command: ["server","/data","--console-address",":9001"]
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio12345
    ports: ["9000:9000","9001:9001"]
    volumes: [minio-data:/data]
    restart: unless-stopped

  loki:
    image: grafana/loki:2.9.8
    command: ["-config.file=/etc/loki/local-config.yaml"]
    ports: ["3100:3100"]
    volumes: [loki-data:/loki]
    restart: unless-stopped

  promtail:
    image: grafana/promtail:2.9.8
    command: ["-config.file=/etc/promtail/config.yml"]
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./promtail-config.yml:/etc/promtail/config.yml:ro
    depends_on: [loki]
    restart: unless-stopped

  grafana:
    image: grafana/grafana:11.1.0
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: "false"
    ports: ["3000:3000"]
    volumes: [grafana-data:/var/lib/grafana]
    depends_on: [loki, prometheus]
    restart: unless-stopped

  jaeger:
    image: jaegertracing/all-in-one:1.60
    environment:
      COLLECTOR_OTLP_ENABLED: "true"
    ports:
      - "16686:16686"
      - "4317:4317"
      - "4318:4318"
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:v2.55.1
    ports: ["9090:9090"]
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.retention.time=7d"
      - "--web.enable-lifecycle"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    restart: unless-stopped

  nginx:
    image: nginx:1.27-alpine
    depends_on: [grafana, jaeger, minio, rabbitmq, prometheus]
    ports:
      - "8080:8080" # Grafana
      - "8081:8081" # Jaeger
      - "8082:8082" # MinIO Console
      - "8083:8083" # RabbitMQ UI
      - "8084:8084" # Prometheus (opcional)
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    restart: unless-stopped

volumes:
  redis-data:
  rabbitmq-data:
  rabbitmq-logs:
  pg-data:
  minio-data:
  loki-data:
  grafana-data:
  prometheus-data:
  api_uploads:
