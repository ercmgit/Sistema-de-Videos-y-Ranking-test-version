services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: app_user
      POSTGRES_PASSWORD: app_password
      POSTGRES_DB: videorank
    ports: ["5432:5432"]
    volumes: [pg-data:/var/lib/postgresql/data]
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL","pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

  migrate:
    image: migrate/migrate:4
    container_name: app_migrate
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./Api/internal/infrastructure/migrations:/migrations:ro
    environment:
      DATABASE_URL: postgres://app_user:app_password@postgres:5432/videorank?sslmode=disable
    entrypoint: ["/bin/sh", "-c"]
    command:
      - |
        /usr/bin/migrate -path=/migrations -database "$$DATABASE_URL" up
    restart: "no"

  api:
    build:
      context: ./Api
    container_name: app_api
    depends_on:
      postgres:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: postgres://app_user:app_password@postgres:5432/videorank?sslmode=disable
      JWT_SECRET: 6EPOc2/6veZ71FAJSF68iv21ho83NLQSaycHEGTTjGO9TBmRsphMp5JqgieFTcGn
      PORT: "8080"
      CORS_ORIGIN: "*"
      UPLOAD_DIR: "/uploads"
    ports: ["8080:8080"]
    volumes: [api_uploads:/uploads]
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL","curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  pg-data:
  api_uploads:
